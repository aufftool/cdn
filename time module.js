class TimeValidator{static config={checkInterval:3e4,quickCheckInterval:1e3,allowedDiff:3e3,maxOfflineDuration:36e5,apis:[{name:"WorldTimeAPI",url:"https://worldtimeapi.org/api/ip",parser:t=>new Date(t.utc_datetime)},{name:"TimeAPI",url:"https://timeapi.io/api/Time/current/zone?timeZone=UTC",parser:t=>new Date(t.dateTime)}]};static state={lastValidTime:null,isTimeValid:!0,violationCount:0,lastSuccessfulFetch:Date.now(),currentAPI:0,overlay:null};static init(){this.createOverlay(),this.startIntervals(),this.addEventListeners(),this.validateTime(),window.TimeValidator=this}static createOverlay(){const t=document.createElement("div");t.id="timeValidatorOverlay",t.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0,0,0,0.96);\n      color: #ff6b6b;\n      display: none;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n      font-family: Arial, sans-serif;\n      text-align: center;\n      backdrop-filter: blur(5px);\n    ",t.innerHTML='\n      <div style="max-width: 600px; padding: 20px;">\n        <h2 style="font-size: 1.8em; margin-bottom: 15px;">⚠️ TIME VERIFICATION FAILED</h2>\n        \n        <div id="timeValidatorOnlineWarning" style="background: rgba(255,107,107,0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">\n          <p>Your system time doesn\'t match our servers:</p>\n          <p><strong>Your Time:</strong> <span id="timeValidatorClientTime"></span></p>\n          <p><strong>Server Time:</strong> <span id="timeValidatorServerTime"></span></p>\n          <p><strong>Difference:</strong> <span id="timeValidatorDifference"></span></p>\n        </div>\n        \n        <div id="timeValidatorOfflineWarning" style="display: none; background: rgba(255,193,7,0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">\n          <p>Cannot verify time (offline). Last verified:</p>\n          <p><strong>Last Valid Time:</strong> <span id="timeValidatorLastValidTime"></span></p>\n          <p><strong>Time Since Last Check:</strong> <span id="timeValidatorOfflineDuration"></span></p>\n        </div>\n        \n        <p style="margin-top: 20px; color: #aaa; font-size: 0.9em;">\n          Please ensure your device has automatic time synchronization enabled.\n        </p>\n      </div>\n    ',document.body.appendChild(t),this.state.overlay=t}static startIntervals(){setInterval((()=>this.validateTime()),this.config.checkInterval),setInterval((()=>this.quickCheck()),this.config.quickCheckInterval)}static addEventListeners(){window.addEventListener("focus",(()=>this.validateTime())),document.addEventListener("visibilitychange",(()=>{"visible"===document.visibilityState&&this.validateTime()}))}static async fetchTime(){const t=this.config.apis[this.state.currentAPI],e=new AbortController,i=setTimeout((()=>e.abort()),3e3);try{const i=await fetch(t.url,{cache:"no-store",signal:e.signal,headers:{"Content-Type":"application/json"}});if(!i.ok)throw new Error(`HTTP ${i.status}`);const a=await i.json(),n=t.parser(a);if(!(n instanceof Date)||isNaN(n.getTime()))throw new Error("Invalid date from API");return this.state.lastSuccessfulFetch=Date.now(),n}catch(a){throw console.warn(`TimeValidator: Failed to fetch from ${t.name} -`,a.message),a}finally{clearTimeout(i)}}static async fetchTimeWithFallback(){let t;for(let i=0;i<this.config.apis.length;i++){const a=(this.state.currentAPI+i)%this.config.apis.length;try{const t=await this.fetchTime(a);return this.state.currentAPI=a,{success:!0,time:t}}catch(e){t=e}}return{success:!1,error:t}}static async validateTime(){const t=new Date;try{const{success:e,time:i,error:a}=await this.fetchTimeWithFallback();e?(this.updateOnlineUI(t,i),this.checkTimeDifference(t,i)):this.handleOfflineState(t,a)}catch(e){console.error("TimeValidator: Unexpected error -",e),this.handleOfflineState(t,e)}}static updateOnlineUI(t,e){const i=document.getElementById("timeValidatorOnlineWarning"),a=document.getElementById("timeValidatorOfflineWarning");i.style.display="block",a.style.display="none",document.getElementById("timeValidatorClientTime").textContent=t.toLocaleString(),document.getElementById("timeValidatorServerTime").textContent=e.toLocaleString();const n=Math.abs(e-t);document.getElementById("timeValidatorDifference").textContent=`${(n/1e3).toFixed(2)} seconds`}static checkTimeDifference(t,e){Math.abs(e-t)>this.config.allowedDiff?this.handleViolation(t,e):(this.handleTimeValid(),this.state.lastValidTime=e)}static handleOfflineState(t,e){const i=Date.now()-this.state.lastSuccessfulFetch,a=document.getElementById("timeValidatorOnlineWarning"),n=document.getElementById("timeValidatorOfflineWarning");if(a.style.display="none",n.style.display="block",document.getElementById("timeValidatorLastValidTime").textContent=this.state.lastValidTime?this.state.lastValidTime.toLocaleString():"Never",document.getElementById("timeValidatorOfflineDuration").textContent=`${Math.floor(i/6e4)} minutes`,this.state.lastValidTime){const e=Math.abs(t-this.state.lastValidTime);if(i>this.config.maxOfflineDuration||e>this.config.allowedDiff)return void this.handleViolation(t,this.state.lastValidTime)}this.state.isTimeValid=!0,this.state.overlay.style.display="none",document.body.style.overflow=""}static handleViolation(t,e){this.state.violationCount++,this.state.isTimeValid=!1,1===this.state.violationCount&&(this.state.overlay.style.display="flex",document.body.style.overflow="hidden",document.querySelectorAll("button, input, a, [onclick]").forEach((t=>{t.style.pointerEvents="none",t.style.opacity="0.5"}))),console.warn(`TimeValidator: Violation #${this.state.violationCount} - Client: ${t} | Server: ${e}`)}static handleTimeValid(){this.state.isTimeValid||(this.state.isTimeValid=!0,this.state.violationCount=0,this.state.overlay.style.display="none",document.body.style.overflow="",document.querySelectorAll("button, input, a, [onclick]").forEach((t=>{t.style.pointerEvents="",t.style.opacity=""})))}static quickCheck(){if(!this.state.lastValidTime||!this.state.isTimeValid)return;const t=new Date,e=new Date(this.state.lastValidTime.getTime()+(Date.now()-this.state.lastSuccessfulFetch));Math.abs(t-e)>1.5*this.config.allowedDiff&&this.validateTime()}static getStatus(){return{isValid:this.state.isTimeValid,lastValidTime:this.state.lastValidTime,violationCount:this.state.violationCount,isOnline:Date.now()-this.state.lastSuccessfulFetch<2*this.config.checkInterval}}}document.addEventListener("DOMContentLoaded",(()=>{TimeValidator.init()})),window.TimeValidator=TimeValidator;
